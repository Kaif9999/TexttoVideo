{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///home/kaif9999/genvr/TexttoVideo/src/app/api/flux1/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport Replicate from \"replicate\";\nimport fetch from \"node-fetch\"; // Optional for manual retry logic\n\n// Initialize Replicate API client\nconst replicate = new Replicate({\n  auth: process.env.REPLICATE_API_KEY || \"\", // Ensure the API key is set\n});\n\n// Function to handle retries\nconst fetchWithRetry = async (url: string, init: RequestInit, retries: number = 3, delay: number = 2000) => {\n  try {\n    return await fetch(url, init);\n  } catch (error) {\n    if (retries > 0) {\n      console.warn(`Retrying fetch... attempts left: ${retries}`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n      return fetchWithRetry(url, init, retries - 1, delay); // Retry the request\n    } else {\n      throw error; // Exhausted retries\n    }\n  }\n};\n\nexport async function POST(req: Request) {\n  try {\n    const { text } = await req.json(); // Get the text input from the request body\n\n    if (!text || typeof text !== \"string\") {\n      return NextResponse.json(\n        { error: \"Text input is required!\" },\n        { status: 400 }\n      );\n    }\n\n    const input = {\n      prompt: text, // Use the transcribed text as the prompt\n    };\n\n    // Call the Replicate API to generate images based on the text with retry logic\n    const output = await replicate.run(\"black-forest-labs/flux-dev-lora\", { input });\n\n    if (!Array.isArray(output) || output.length === 0) {\n      return NextResponse.json(\n        { error: \"No images generated by the API.\" },\n        { status: 500 }\n      );\n    }\n\n    // Prepare an array to hold the image URLs\n    const imageUrls: string[] = [];\n\n    // Iterate over each output (assuming URLs are returned)\n    for (const url of output) {\n      // Simply push the image URL directly into the imageUrls array\n      imageUrls.push(url);\n    }\n\n    // Return the generated image URLs\n    return NextResponse.json({\n      imageUrls, // Array of image URLs\n    });\n  } catch (error) {\n    console.error(\"Error while generating images:\", error);\n\n    // Provide a user-friendly error message and log the actual error for debugging\n    return NextResponse.json(\n      { error: \"An error occurred while processing your request.\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA,gRAAgC,kCAAkC;;;;AAElE,kCAAkC;AAClC,MAAM,YAAY,IAAI,oIAAA,CAAA,UAAS,CAAC;IAC9B,MAAM,QAAQ,GAAG,CAAC,iBAAiB,IAAI;AACzC;AAEA,6BAA6B;AAC7B,MAAM,iBAAiB,OAAO,KAAa,MAAmB,UAAkB,CAAC,EAAE,QAAgB,IAAI;IACrG,IAAI;QACF,OAAO,MAAM,CAAA,GAAA,+JAAA,CAAA,UAAK,AAAD,EAAE,KAAK;IAC1B,EAAE,OAAO,OAAO;QACd,IAAI,UAAU,GAAG;YACf,QAAQ,IAAI,CAAC,CAAC,iCAAiC,EAAE,SAAS;YAC1D,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YACjD,OAAO,eAAe,KAAK,MAAM,UAAU,GAAG,QAAQ,oBAAoB;QAC5E,OAAO;YACL,MAAM,OAAO,oBAAoB;QACnC;IACF;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI,IAAI,2CAA2C;QAE9E,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ;YACZ,QAAQ;QACV;QAEA,+EAA+E;QAC/E,MAAM,SAAS,MAAM,UAAU,GAAG,CAAC,mCAAmC;YAAE;QAAM;QAE9E,IAAI,CAAC,MAAM,OAAO,CAAC,WAAW,OAAO,MAAM,KAAK,GAAG;YACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,0CAA0C;QAC1C,MAAM,YAAsB,EAAE;QAE9B,wDAAwD;QACxD,KAAK,MAAM,OAAO,OAAQ;YACxB,8DAA8D;YAC9D,UAAU,IAAI,CAAC;QACjB;QAEA,kCAAkC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,+EAA+E;QAC/E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmD,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}