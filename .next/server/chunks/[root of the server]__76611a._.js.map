{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/kaif9999/genvr/TexttoVideo/src/app/api/flux1/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport Replicate from \"replicate\";\nimport fetch from \"node-fetch\";\nimport { v2 as cloudinary } from \"cloudinary\";\n\n// Initialize Replicate API client\nconst replicate = new Replicate({\n  auth: process.env.REPLICATE_API_KEY || \"\",\n});\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nexport async function POST(req: Request) {\n  try {\n    const { text } = await req.json();\n\n    if (!text || typeof text !== \"string\") {\n      return NextResponse.json(\n        { error: \"Text input is required!\" },\n        { status: 400 }\n      );\n    }\n\n    const input = {\n      prompt: text,\n    };\n\n    // Call Replicate API\n    const output = await replicate.run(\"black-forest-labs/flux-dev-lora\", { input });\n\n    if (!Array.isArray(output) || output.length === 0) {\n      return NextResponse.json(\n        { error: \"No images generated by the API.\" },\n        { status: 500 }\n      );\n    }\n\n    const cloudinaryUrls: string[] = [];\n\n    for (const url of output) {\n      // Fetch the image from the URL\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image from ${url}`);\n      }\n\n      const imageBuffer = await response.buffer();\n\n      // Upload the image to Cloudinary\n      const uploadResult = await cloudinary.uploader.upload(\n        `data:image/jpeg;base64,${imageBuffer.toString('base64')}`,\n        {\n          folder: \"generated-images\",\n        }\n      );\n\n      if (!uploadResult?.secure_url) {\n        throw new Error(\"Failed to get Cloudinary secure URL.\");\n      }\n\n      cloudinaryUrls.push(uploadResult.secure_url);\n    }\n\n    // Return Cloudinary URLs to the frontend\n    return NextResponse.json({\n      imageUrls: cloudinaryUrls,\n    });\n  } catch (error) {\n    console.error(\"Error while generating and uploading images:\", error);\n    return NextResponse.json(\n      { error: \"An error occurred while processing your request.\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AADA;;;;;AAGA,kCAAkC;AAClC,MAAM,YAAY,IAAI,oIAAA,CAAA,UAAS,CAAC;IAC9B,MAAM,QAAQ,GAAG,CAAC,iBAAiB,IAAI;AACzC;AAEA,uBAAuB;AACvB,0IAAA,CAAA,KAAU,CAAC,MAAM,CAAC;IAChB,YAAY,QAAQ,GAAG,CAAC,qBAAqB;IAC7C,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IACvC,YAAY,QAAQ,GAAG,CAAC,qBAAqB;AAC/C;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ;YACZ,QAAQ;QACV;QAEA,qBAAqB;QACrB,MAAM,SAAS,MAAM,UAAU,GAAG,CAAC,mCAAmC;YAAE;QAAM;QAE9E,IAAI,CAAC,MAAM,OAAO,CAAC,WAAW,OAAO,MAAM,KAAK,GAAG;YACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAA2B,EAAE;QAEnC,KAAK,MAAM,OAAO,OAAQ;YACxB,+BAA+B;YAC/B,MAAM,WAAW,MAAM,CAAA,GAAA,+JAAA,CAAA,UAAK,AAAD,EAAE;YAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,KAAK;YACrD;YAEA,MAAM,cAAc,MAAM,SAAS,MAAM;YAEzC,iCAAiC;YACjC,MAAM,eAAe,MAAM,0IAAA,CAAA,KAAU,CAAC,QAAQ,CAAC,MAAM,CACnD,CAAC,uBAAuB,EAAE,YAAY,QAAQ,CAAC,WAAW,EAC1D;gBACE,QAAQ;YACV;YAGF,IAAI,CAAC,cAAc,YAAY;gBAC7B,MAAM,IAAI,MAAM;YAClB;YAEA,eAAe,IAAI,CAAC,aAAa,UAAU;QAC7C;QAEA,yCAAyC;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,WAAW;QACb;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gDAAgD;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmD,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}