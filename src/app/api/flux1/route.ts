import { NextResponse } from "next/server";
import Replicate from "replicate";
import fetch from "node-fetch";
import { v2 as cloudinary } from "cloudinary";

// Initialize Replicate API client
const replicate = new Replicate({
  auth: process.env.REPLICATE_API_KEY || "",
});

// Configure Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function POST(req: Request) {
  try {
    const { text } = await req.json();

    if (!text || typeof text !== "string") {
      return NextResponse.json(
        { error: "Text input is required!" },
        { status: 400 }
      );
    }

    const input = {
      prompt: text,
    };

    // Call Replicate API
    const output = await replicate.run("black-forest-labs/flux-dev-lora", { input });

    if (!Array.isArray(output) || output.length === 0) {
      return NextResponse.json(
        { error: "No images generated by the API." },
        { status: 500 }
      );
    }

    const cloudinaryUrls: string[] = [];

    for (const url of output) {
      // Fetch the image from the URL
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`Failed to fetch image from ${url}`);
      }

      const imageBuffer = await response.buffer();

      // Upload the image to Cloudinary
      const uploadResult = await cloudinary.uploader.upload(
        `data:image/jpeg;base64,${imageBuffer.toString('base64')}`,
        {
          folder: "generated-images",
        }
      );

      if (!uploadResult?.secure_url) {
        throw new Error("Failed to get Cloudinary secure URL.");
      }

      cloudinaryUrls.push(uploadResult.secure_url);
    }

    // Return Cloudinary URLs to the frontend
    return NextResponse.json({
      imageUrls: cloudinaryUrls,
    });
  } catch (error) {
    console.error("Error while generating and uploading images:", error);
    return NextResponse.json(
      { error: "An error occurred while processing your request." },
      { status: 500 }
    );
  }
}
