import { NextResponse } from "next/server";
import Replicate from "replicate";
import { writeFile } from "node:fs/promises";
import path from "path";
import fs from "fs";
import fetch from "node-fetch"; // Add fetch for downloading files

// Initialize Replicate API client
const replicate = new Replicate({
  auth: process.env.REPLICATE_API_KEY || "", // Ensure the API key is set
});

export async function POST(req: Request) {
  try {
    const { text } = await req.json(); // Get the text input from the request body

    if (!text || typeof text !== "string") {
      return NextResponse.json(
        { error: "Text input is required!" },
        { status: 400 }
      );
    }

    const input = {
      prompt: text, // Use the transcribed text as the prompt
    };

    // Call the Replicate API to generate images based on the text
    const output = await replicate.run("black-forest-labs/flux-dev-lora", { input }) as string[];

    if (!Array.isArray(output) || output.length === 0) {
      return NextResponse.json(
        { error: "No images generated by the API." },
        { status: 500 }
      );
    }

    // Create an output folder if it doesn't exist
    const outputDir = path.join(process.cwd(), "public", "generated");
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Prepare an array to hold the file paths of the saved images
    const imagePaths = [];

    // Iterate over each output (assuming URLs are returned)
    for (const [index, url] of output.entries()) {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Failed to fetch image from ${url}`);
      }
      const imageBuffer = await response.arrayBuffer();
      const filePath = path.join(outputDir, `output_${index}.webp`);
      await writeFile(filePath, Buffer.from(imageBuffer)); // Save as binary
      imagePaths.push(`/generated/output_${index}.webp`); // Store the relative path for frontend access
    }

    // Return the generated image URLs
    return NextResponse.json({
      imageUrls: imagePaths, // Array of image URLs
    });
  } catch (error) {
    console.error("Error while generating images:", error);

    // Provide a user-friendly error message and log the actual error for debugging
    return NextResponse.json(
      { error: "An error occurred while processing your request." },
      { status: 500 }
    );
  }
}
